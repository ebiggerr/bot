{ 
  "1": "The Genius Myth. \n \nDeep down, many engineers secretly wish to be seen as geniuses. This fantasy goes\nsomething like this:\n \n• You vanish into your cave for weeks or months, slaving away at a perfect implementation\nof your idea.\n• You then “unleash” your software on the world, shocking everyone with your\ngenius.\n \nIt is just another manifestation of our insecurity.\nMany programmers are afraid to share work they’ve only just started because it\nmeans peers will see their mistakes.\n\nThis is an extremely common feeling among programmers, and the natural reaction\nis to hide in a cave, work, work, work, and then polish, polish, polish, sure that no\none will see your goof-ups and that you’ll still have a chance to unveil your masterpiece\nwhen you’re done. \n \n ---from Software Engineering at Google by Titus Winters, Tom Manshreck and Hyrum Wright.---",
  "2": "Hiding Considered Harmful\n\nIf you spend all of your time working alone, you're increasng the risk of unnecessary failure and cheating\nyour potential for growth.\n\nIt is just another manifestation of our insecurity.\nMany programmers are afraid to share work they’ve only just started because it\nmeans peers will see their mistakes.\n\nBut, how do you even know whether you're on the right track if you are hiding?",
  "3": "People are inherently imperfect. We like to say that humans are mostly a collection of intermittent\nbugs. Before you can understand the bugs in someone you know, you need to undestand the bugs in yourself.\n\nSoftware development is a team endeavor. And to succeed on an engineering team, you need to recognise your\nbehaviors around the core principles of humility, respect and trust.",
  "4": "The Bus Factor ( bus factor - the number of people that need to get hit by a bus before the project is doomed )\n\nHow dispersed is the knowledge and know-how in your project? If you're the only peson who understands how\nthe code works, you might enjoy good job security--but if you get hit by a bus, the project will then completely doomed.\n\nEnsurng that there is at least good documentation in addition to primary and a secondary ownerrr for each area of responsiblity\nhelps future-proof the project's success and increases the bus factor.",
  "5": "Write a new function, compile. Add a test, compile. Refactor some code, compile. \n\nGet feedback ASAP, test ASAP, think about security and production environments ASAP.\n\nThe earlier we find a problem, the cheaper it is to fix it.",
  "6": "Challenges to Learning - Information Islands\n\nKnowledge fragmentation that occurs in different parts of an organization that don't communicate\nwith one anotherr or use shared resources. \n\nIn such an environment, each group develops its own way of doing things. This often leads to the following:\n\nInformation fragmentation - Each island has an incomplete picture of the bigger whole.\nInformation duplication - Each island has reinvented its own way of doing something.\nInformaton skew - Each island has its own way of doing the same thing, and these might or might not conflict.\n",
  "7": "Challenges to Learning - All-or-nothing expertise\n\nA group of people that is split between people who know \"everything\" and novices, with little middle ground.\n\nThis problem often reinforces itself if experts always do everything themselves and don’t take the time \nto develop new experts through mentoring or documentation. \n\nIn this scenario, knowledge and responsibilities continue to accumulate on those who already \nhave expertise, and new team members or novices are left to fend for themselves and ramp up more slowly.",
  "8": "Challenges to Learning - Parroting\n\nMimicry without understanding. This is typically characterized by mindlessly\ncopying patterns or code without understanding their purpose, often under the\nassumption that said code is needed for unknown reasons.",
  "9": "playing",
  "10": "playing",
  "11": "playing",
  "12": "playing",
  "13": "playing",
  "14": "playing",
  "15": "playing",
  "16": "playing",
  "17": "playing",
  "18": "playing",
  "19": "playing",
  "20": "playing",
  "Credit": "All of the contents used here is from the book Software Engineering at Google by Titus Winters, Tom Manshreck and Hyrum Wright. The e-book is free, big thanks to the authors and O'Reilly. Support them by buying the physical copy of the book."
}